title = md("**Odds Ratio for ....**"),
subtitle = md("*Based on a binomial GLM adjusted for confounding*")
) %>%
opt_align_table_header("left") %>%
fmt_number(
decimals = 3
) %>% opt_row_striping() %>%
cols_width(
everything() ~ px(150)
) %>%
tab_source_note(
source_note = "Source: MLDataR dataset"
) %>%
tab_footnote(
footnote = "ECG was performed with a resting patients",
locations = cells_body(columns = "age", rows = 4:5)
)
gt_model1_tidy <-
gt(model1_tidy) %>%
tab_header(
title = md("**Odds Ratio for ....**"),
subtitle = md("*Based on a binomial GLM adjusted for confounding*")
) %>%
opt_align_table_header("left") %>%
fmt_number(
decimals = 3
) %>% opt_row_striping() %>%
cols_width(
everything() ~ px(150)
) %>%
tab_source_note(
source_note = "Source: MLDataR dataset"
) %>%
tab_footnote(
footnote = "ECG was performed with a resting patients",
locations = cells_body(columns = "estimate", rows = 4:5)
)
p <- ggplot(data= hypoxia,
aes(x = age, y = bmi)) +
geom_point()+
labs(title = "Number of-....",
subtitle = "2015-2022",
caption = "Source: Ministry of Health, Portugal")
p
table2 <-
tbl_summary(
hypoxia,
include = c(female, age,  sleeptime, cpap),
by = smoking_yesno, # split table by group
missing = "no" # don't list missing data separately
) %>%
add_overall() %>%
modify_spanning_header(c("stat_1", "stat_2") ~ "**Smoking**") %>%
add_n() %>% # add column with total number of non-missing observations
add_p() %>% # test for a difference between groups
modify_header(label = "**Variable**") %>% # update the column header
modify_caption("** Patient Characteristics **")
table2
rm(list = ls(all.names = TRUE)) # limpa todos os objetos, incluindo os ocultos
#install.packages("broom")
#install.packages("MLDataR")
#install.packages("gtsummary")
# check the website https://www.danieldsjoberg.com/gtsummary/
#install.packages("report")
library(janitor)
library(tidyverse)
library(readxl)
library(lubridate)
library(data.table)
library(here)
library(haven)
library(broom)
library(MLDataR)
library(readr)
library(broom)
library(janitor)
library(kableExtra)
library(gapminder)
library(gt)
library(gtsummary)
library(report)
hypoxia <- read_excel("data/hypoxia.xlsx")
hypoxia <- clean_names(hypoxia)
1+1
mean_age = hypoxia %>%
summarise(
mean=mean(age)
)
view(mean_age)
sum_cases = hypoxia%>%
summarise(
sum__cases=n()
)
view(sum_cases)
hypoxia <- hypoxia %>%
mutate(smoking_yesno= ifelse(smoking==1, "Yes", "No"))
view(hypoxia)
table2 <-
tbl_summary(
hypoxia,
include = c(female, age,  sleeptime, cpap),
by = smoking_yesno, # split table by group
missing = "no" # don't list missing data separately
) %>%
add_overall() %>%
modify_spanning_header(c("stat_1", "stat_2") ~ "**Smoking**") %>%
add_n() %>% # add column with total number of non-missing observations
add_p() %>% # test for a difference between groups
modify_header(label = "**Variable**") # update the column header
table2
model1_logit <- glm(
cpap ~ age + as.factor(smoking_yesno),
family="binomial",
data=hypoxia
)
model1_tidy <- tidy(model1_logit, exponentiate = TRUE, conf.int = TRUE)
model1_tidy
a<-report(model1_tidy)
model2 <- lm(cpap~ as.factor(smoking_yesno), data= hypoxia)
model2_tidy <- tidy(model2, conf.int = TRUE)
model2_tidy
p <- ggplot(data= hypoxia,
aes(x = age, y = bmi)) +
geom_point()+
labs(title = "Number of-....",
subtitle = "2015-2022",
caption = "Source: Ministry of Health, Portugal")
p
p1<- ggplot(
data = hypoxia,
mapping = aes(
x=age,
y=bmi,
colour=as.factor(smoking_yesno))
)+
geom_point(alpha=0.5) +
geom_smooth(method = loess, se= FALSE) +
labs(
title = "Age and BMI",
subtitle = "By SMOKING",
y = "BMI",
x = "Age",
caption = "Source: SOMEWHERE",
colour=""
) +
theme_minimal() +
theme(legend.position="bottom")
p1
# Load necessary libraries
library(ggplot2)  # For data visualization
library(dplyr)    # For data manipulation
# Load the Iris dataset (a publicly available dataset in R)
data(iris)
# Prepare the data: We'll create a summary table with the mean values for each species
summary_data <- iris %>%
group_by(Species) %>%
summarise(
Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Petal.Width = mean(Petal.Width)
)
# Create a spider plot
spider_plot <- ggplot(summary_data, aes(x = factor(Species))) +
geom_polygon(aes(y = Sepal.Length, group = 1), fill = "blue", alpha = 0.5) +
geom_polygon(aes(y = Sepal.Width, group = 1), fill = "green", alpha = 0.5) +
geom_polygon(aes(y = Petal.Length, group = 1), fill = "red", alpha = 0.5) +
geom_polygon(aes(y = Petal.Width, group = 1), fill = "purple", alpha = 0.5) +
# Customize the plot
theme_minimal() +
labs(
title = "Spider Plot of Iris Data",
subtitle = "Mean measurements for Sepal Length, Sepal Width, Petal Length, and Petal Width",
x = "Species",
y = "Mean Value"
) +
coord_polar(start = 0) +  # Make it a spider plot
# Adjust the axis limits
ylim(0, 4) +
# Add legend
scale_fill_manual(values = c("blue", "green", "red", "purple"),
name = "Measurement",
labels = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width"))
# Display the spider plot
print(spider_plot)
rm(list = ls(all.names = TRUE)) # limpa todos os objetos, incluindo os ocultos
# Load necessary libraries
library(ggplot2)  # For data visualization
library(dplyr)    # For data manipulation
# Load the Iris dataset (a publicly available dataset in R)
data(iris)
# Prepare the data: We'll create a summary table with the mean values for each species
summary_data <- iris %>%
group_by(Species) %>%
summarise(
Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Petal.Width = mean(Petal.Width)
)
# Create a spider plot
spider_plot <- ggplot(summary_data, aes(x = factor(Species))) +
geom_polygon(aes(y = Sepal.Length, group = 1), fill = "blue", alpha = 0.5) +
geom_polygon(aes(y = Sepal.Width, group = 1), fill = "green", alpha = 0.5) +
geom_polygon(aes(y = Petal.Length, group = 1), fill = "red", alpha = 0.5) +
geom_polygon(aes(y = Petal.Width, group = 1), fill = "purple", alpha = 0.5) +
# Customize the plot
theme_minimal() +
labs(
title = "Spider Plot of Iris Data",
subtitle = "Mean measurements for Sepal Length, Sepal Width, Petal Length, and Petal Width",
x = "Species",
y = "Mean Value"
) +
coord_polar(start = 0) +  # Make it a spider plot
# Adjust the axis limits
ylim(0, 4) +
# Add legend
scale_fill_manual(values = c("blue", "green", "red", "purple"),
name = "Measurement",
labels = c("Sepal Length", "Sepal Width", "Petal Length", "Petal Width"))
# Display the spider plot
print(spider_plot)
View(iris)
View(spider_plot)
View(summary_data)
# Load necessary libraries
library(ggplot2)  # For data visualization
library(dplyr)    # For data manipulation
# Load the mtcars dataset (a publicly available dataset in R)
data(mtcars)
# Prepare the data: We'll create a summary table with the mean values for each car brand
summary_data <- mtcars %>%
group_by(car_brand = rownames(mtcars)) %>%
summarise(
mpg = mean(mpg),
hp = mean(hp),
wt = mean(wt),
qsec = mean(qsec)
) %>%
arrange(car_brand)
# Create a spider plot
spider_plot <- ggplot(summary_data, aes(x = factor(car_brand))) +
geom_polygon(aes(y = mpg, group = 1), fill = "blue", alpha = 0.5) +
geom_polygon(aes(y = hp, group = 1), fill = "green", alpha = 0.5) +
geom_polygon(aes(y = wt, group = 1), fill = "red", alpha = 0.5) +
geom_polygon(aes(y = qsec, group = 1), fill = "purple", alpha = 0.5) +
# Customize the plot
theme_minimal() +
labs(
title = "Spider Plot of Car Attributes",
subtitle = "Mean values for MPG, HP, Weight (wt), and Quarter Mile Time (qsec)",
x = "Car Brand",
y = "Mean Value"
) +
coord_polar(start = 0) +  # Make it a spider plot
# Adjust the axis limits
ylim(0, 30) +
# Add legend
scale_fill_manual(values = c("blue", "green", "red", "purple"),
name = "Attribute",
labels = c("MPG", "HP", "Weight (wt)", "Quarter Mile Time (qsec)"))
# Display the spider plot
print(spider_plot)
# Load necessary libraries
library(ggplot2)  # For data visualization
library(dplyr)    # For data manipulation
# Load the mtcars dataset (a publicly available dataset in R)
data(mtcars)
# Prepare the data: We'll create a summary table with the mean values for each car brand
summary_data <- mtcars %>%
group_by(car_brand = rownames(mtcars)) %>%
summarise(
mpg = mean(mpg),
hp = mean(hp),
wt = mean(wt),
qsec = mean(qsec)
) %>%
arrange(car_brand)
# Create a spider plot
spider_plot <- ggplot(summary_data, aes(x = factor(car_brand))) +
geom_polygon(aes(y = mpg, group = 1), fill = "blue", alpha = 0.5) +
geom_polygon(aes(y = hp, group = 1), fill = "green", alpha = 0.5) +
geom_polygon(aes(y = wt, group = 1), fill = "red", alpha = 0.5) +
geom_polygon(aes(y = qsec, group = 1), fill = "purple", alpha = 0.5) +
# Customize the plot
theme_minimal() +
labs(
title = "Spider Plot of Car Attributes",
subtitle = "Mean values for MPG, HP, Weight (wt), and Quarter Mile Time (qsec)",
x = "Car Brand",
y = "Mean Value"
) +
coord_polar(start = 0) +  # Make it a spider plot
# Adjust the axis limits
ylim(0, 30) +
# Add legend
scale_fill_manual(values = c("blue", "green", "red", "purple"),
name = "Attribute",
labels = c("MPG", "HP", "Weight (wt)", "Quarter Mile Time (qsec)"))
# Display the spider plot
spider_plot
# Load necessary libraries
library(ggplot2)  # For data visualization
library(dplyr)    # For data manipulation
# Load the Iris dataset (a publicly available dataset in R)
data(iris)
# Selecting the relevant columns for clustering
iris_data <- iris[, c("Sepal.Length", "Sepal.Width")]
# Perform k-means clustering with 3 clusters
set.seed(123)  # For reproducibility
k <- 3
kmeans_result <- kmeans(iris_data, centers = k)
# Add cluster assignments to the original dataset
iris_clustered <- iris %>%
mutate(Cluster = as.factor(kmeans_result$cluster))
# Create a scatter plot with points colored by cluster
cluster_plot <- ggplot(iris_clustered, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
geom_point(size = 3) +
# Customize the plot
theme_minimal() +
labs(
title = "K-Means Clustering of Iris Sepal Data",
x = "Sepal Length",
y = "Sepal Width"
) +
# Add legend
scale_color_manual(values = c("1" = "red", "2" = "blue", "3" = "green"))
# Display the clustering plot
print(cluster_plot)
# Load necessary libraries
library(ggplot2)  # For data visualization
# Load the mtcars dataset (a publicly available dataset in R)
data(mtcars)
# Select variables for the Vitruvian graphic (e.g., MPG, HP, and wt)
variables_to_plot <- c("mpg", "hp", "wt")
# Create a dataframe with selected variables
vitruvian_data <- mtcars[, variables_to_plot]
# Normalize the data to fit within a circle
normalized_data <- data.frame(
variable = rep(variables_to_plot, each = nrow(mtcars)),
value = as.vector(scale(vitruvian_data))
)
# Create the Vitruvian Man graphic
vitruvian_plot <- ggplot(normalized_data, aes(x = cos(2 * pi * variable), y = sin(2 * pi * variable))) +
geom_point(aes(size = abs(value), color = variable), alpha = 0.7) +
# Customize the plot
theme_void() +
labs(
title = "Vitruvian Man-Inspired Graphic of Car Attributes",
subtitle = "Variables: MPG, HP, and Weight (wt)"
) +
scale_size_continuous(range = c(2, 10)) +
scale_color_manual(values = c("mpg" = "blue", "hp" = "red", "wt" = "green"))
# Display the Vitruvian graphic
print(vitruvian_plot)
# Load necessary libraries
library(ggplot2)  # For data visualization
# Load the mtcars dataset (a publicly available dataset in R)
data(mtcars)
# Select variables for the Vitruvian graphic (e.g., MPG, HP, and wt)
variables_to_plot <- c("mpg", "hp", "wt")
# Create a dataframe with selected variables
vitruvian_data <- mtcars[, variables_to_plot]
# Normalize the data to fit within a circle
normalized_data <- data.frame(
variable = rep(variables_to_plot, each = nrow(mtcars)),
value = as.vector(scale(vitruvian_data))
)
# Create the Vitruvian Man graphic
vitruvian_plot <- ggplot(normalized_data, aes(x = cos(2 * pi * variable), y = sin(2 * pi * variable))) +
geom_point(aes(size = abs(value), color = variable), alpha = 0.7) +
# Customize the plot
theme_void() +
labs(
title = "Vitruvian Man-Inspired Graphic of Car Attributes",
subtitle = "Variables: MPG, HP, and Weight (wt)"
) +
scale_size_continuous(range = c(2, 10)) +
scale_color_manual(values = c("mpg" = "blue", "hp" = "red", "wt" = "green"))
# Display the Vitruvian graphic
vitruvian_plot
# Carregue as bibliotecas necessárias
library(sf)
library(ggplot2)
library(rnaturalearth)
install.packages("rnaturalearth")
# Carregue as bibliotecas necessárias
#install.packages("rnaturalearth")
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
insta..,packages("rnaturalearthdata")
install.packages("rnaturalearthdata")
# Carregue as bibliotecas necessárias
#install.packages("rnaturalearth")
#install.packages("rnaturalearthdata")
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
# Carregue dados de países do mundo e obtenha os dados de Portugal
world <- ne_countries(scale = "medium", returnclass = "sf")
portugal <- world[world$ADMIN == "Portugal", ]
# Obtenha dados de distritos de Portugal
distritos <- ne_states(country = "Portugal", returnclass = "sf")
# Carregue as bibliotecas necessárias
#install.packages("rnaturalearth")
#install.packages("rnaturalearthdata")
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
# Carregue dados de países do mundo e obtenha os dados de Portugal
world <- ne_countries(scale = "medium", returnclass = "sf")
portugal <- world[world$ADMIN == "Portugal", ]
# Obtenha dados de distritos de Portugal
distritos <- ne_states(country = "Portugal", returnclass = "sf")
y
# Carregue as bibliotecas necessárias
#install.packages("rnaturalearth")
#install.packages("rnaturalearthdata")
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
# Carregue dados de países do mundo e obtenha os dados de Portugal
world <- ne_countries(scale = "medium", returnclass = "sf")
portugal <- world[world$ADMIN == "Portugal", ]
# Obtenha dados de distritos de Portugal
distritos <- ne_states(country = "Portugal", returnclass = "sf")
install.packages("rnaturalearthhires")
# Carregue as bibliotecas necessárias
#install.packages("rnaturalearth")
#install.packages("rnaturalearthdata")
#install.packages("rnaturalearthhires")
library(sf)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
# Carregue dados de países do mundo e obtenha os dados de Portugal
world <- ne_countries(scale = "medium", returnclass = "sf")
portugal <- world[world$ADMIN == "Portugal", ]
# Obtenha dados de distritos de Portugal
distritos <- ne_states(country = "Portugal", returnclass = "sf")
install.packages("rworldmap")
library(rworldmap)
library(ggplot2)
library(dplyr)
# Carregue os dados de países do mundo
world_map <- getMap(resolution = "coarse", countryName = "Portugal")
# Crie um mapa de Portugal usando rworldmap
map <- getMap(resolution = "coarse")
# Crie um dataframe de exemplo com cores aleatórias por distrito
set.seed(123)  # Para cores consistentes
district_data <- data.frame(
ID = unique(map$ISO2),
random_color = sample(colors(), length(unique(map$ISO2)), replace = TRUE)
)
# Junte o dataframe de cores com o mapa
map_data <- merge(map, district_data, by.x = "ISO2", by.y = "ID")
# Crie um mapa de Portugal usando rworldmap
map <- getMap(resolution = "coarse")
# Crie um dataframe de exemplo com cores aleatórias por distrito
set.seed(123)  # Para cores consistentes
district_data <- data.frame(
ID = unique(map$ISO2),
random_color = sample(colors(), length(unique(map$ISO2)), replace = TRUE)
)
# Junte o dataframe de cores com o mapa
map_data <- merge(map, district_data, by."x" = "ISO2", by.y = "ID")
# Crie um mapa de Portugal usando rworldmap
map <- getMap(resolution = "coarse")
# Crie um dataframe de exemplo com cores aleatórias por distrito
set.seed(123)  # Para cores consistentes
district_data <- data.frame(
ID = unique(map$ISO2),
random_color = sample(colors(), length(unique(map$ISO2)), replace = TRUE)
)
# Junte o dataframe de cores com o mapa
map_data <- merge(map, district_data, by.x = "ISO2", by.y = "ID")
# Crie um mapa de Portugal usando rworldmap
map <- getMap(resolution = "coarse")
# Crie um dataframe de exemplo com cores aleatórias por distrito
set.seed(123)  # Para cores consistentes
district_data <- data.frame(
ID = unique(map$ISO2),
random_color = sample(colors(), length(unique(map$ISO2)), replace = TRUE)
)
# Junte o dataframe de cores com o mapa
map_data <- merge(map, district_data, by = "ISO2", by.y = "ID")
# Crie um mapa de Portugal usando rworldmap
map <- getMap(resolution = "coarse")
# Crie um dataframe de exemplo com cores aleatórias por distrito
set.seed(123)  # Para cores consistentes
district_data <- data.frame(
ID = unique(map$ISO2),
random_color = sample(colors(), length(unique(map$ISO2)), replace = TRUE)
)
# Junte o dataframe de cores com o mapa
map_data <- merge(map, district_data, by.x = "ISO2", by.y = "ID")
# Instale e carregue os pacotes necessários
install.packages("sf")
library(sf)
library(ggplot2)
# Baixe dados geoespaciais de distritos portugueses (exemplo)
# Substitua 'seu_arquivo_shapefile.shp' pelo caminho do seu próprio arquivo shapefile
# Certifique-se de que o arquivo shapefile contenha dados dos distritos e cores apropriadas
shapefile_path <- "seu_arquivo_shapefile.shp"
distritos <- st_read(shapefile_path)
install.packages("sf")
